#!/bin/bash

set -e -E -u -o pipefail -o noclobber -o noglob +o braceexpand || exit -- 1
trap 'printf -- "[ee] failed: %s\n" "${BASH_COMMAND}" >&2' ERR || exit -- 1
test "${#}" -eq 0
export -- LC_ALL=C


if test -e ./.x-run.options -a ./.x-run.options -nt ./.x-run ; then
	exec -- cat -- ./.x-run.options ./.x-run.builder
	exit -- 1
else
	exec {_stdout_fd}<&1
	exec >| ./.x-run.options.tmp1
fi




cat <<'EOS-31f6e6b1'




:: git :: exec -- git-w




:: compile / all / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" "${@}"
:: compile / all / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / tree / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo tree --quiet --all --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" "${@}"
:: compile / tree / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo tree --quiet --all --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / lib / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --lib --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" "${@}"
:: compile / lib / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --lib --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / bin / interpreter / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-interpreter --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_binaries}" "${@}"
:: compile / bin / interpreter / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-interpreter --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / bin / compiler / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-compiler --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_binaries}" "${@}"
:: compile / bin / compiler / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-compiler --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / bin / tester / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-tester --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_binaries}" "${@}"
:: compile / bin / tester / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-tester --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / bin / bencher / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-bencher --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_binaries}" "${@}"
:: compile / bin / bencher / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --bin vonuvoli-scheme-bencher --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" "${@}"

:: compile / test / all / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --no-run "${@}"
:: compile / test / all / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --no-run "${@}"

:: compile / doc / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo doc --quiet --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --no-deps "${@}"
:: compile / doc / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo doc --quiet --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --no-deps "${@}"

:: compile / clean :: exec -- find ./target/ -mindepth 1 -xdev -depth -print -delete
<< compile / clean / perhaps
	test "${#}" -eq 0
	if test "$( du -m -c -d 0 -- ./target/ | tail -n 1 | cut -f 1 )" -gt 4096 ; then
		printf -- '[ww]  cleaning target!\n' >&2
		find ./target/ -mindepth 1 -xdev -depth -delete
	fi
!!

:: compile / documentation / readme / restview :: exec -- ./.python/bin/restview -B -l 53110 -- ./readme.rst
:: compile / documentation / r7rs-support :: exec -- "${X_RUN[@]}" ':: execute / test / low-level-r7rs / tests / all / debug' 2>| ./documentation/r7rs-support.md




:: compile / bin / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / bin / all / debug' "${@}"
<< compile / bin / all / debug
	"${X_RUN[@]}" ':: compile / bin / interpreter / debug' "${@}"
	"${X_RUN[@]}" ':: compile / bin / compiler / debug' "${@}"
	"${X_RUN[@]}" ':: compile / bin / tester / debug' "${@}"
	"${X_RUN[@]}" ':: compile / bin / bencher / debug' "${@}"
!!

:: compile / bin / all / release / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / bin / all / release' "${@}"
<< compile / bin / all / release
	"${X_RUN[@]}" ':: compile / bin / interpreter / release' "${@}"
	"${X_RUN[@]}" ':: compile / bin / compiler / release' "${@}"
	"${X_RUN[@]}" ':: compile / bin / tester / release' "${@}"
	"${X_RUN[@]}" ':: compile / bin / bencher / release' "${@}"
!!




<< compile / lib / debug / features / all
	"${X_RUN[@]}" ':: compile / lib / debug / features / targets'
	"${X_RUN[@]}" ':: compile / lib / debug / features / individual'
	"${X_RUN[@]}" ':: compile / lib / debug / features / except-one'
!!


<< execute / features / individual
	test "${#}" -ge 1
	readarray -t -- VONUVOLI_SCHEME_FEATURES < <( "${X_RUN[@]}" ':: environment / features / list / individual' | sort -R )
	for VONUVOLI_SCHEME_FEATURES in "${VONUVOLI_SCHEME_FEATURES[@]}" ; do
		printf -- '[ii]  using features `%s`...\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
		_identifier="$( printf -- '%s' "${VONUVOLI_SCHEME_FEATURES}" | md5sum -b )" ; _identifier="${_identifier%% *}"
		_target="$( exec -- readlink -e -- ./target )/features--${_identifier}"
		if ! VONUVOLI_SCHEME_FEATURES="${VONUVOLI_SCHEME_FEATURES}" CARGO_TARGET_DIR="${_target}" "${@}" ; then
			printf -- '[ee]  failed using features `%s`!\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
			exit -- 1
		fi
		printf -- '[--]\n' >&2
	done
!!

:: compile / lib / debug / features / individual :: exec -- "${X_RUN[@]}" ':: execute / features / individual' "${X_RUN[@]}" ':: compile / lib / debug' "${@}"


<< execute / features / except-one
	test "${#}" -ge 1
	readarray -t -- VONUVOLI_SCHEME_FEATURES < <( "${X_RUN[@]}" ':: environment / features / list / except-one' | sort -R )
	for VONUVOLI_SCHEME_FEATURES in "${VONUVOLI_SCHEME_FEATURES[@]}" ; do
		printf -- '[ii]  using features `%s`...\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
		_identifier="$( printf -- '%s' "${VONUVOLI_SCHEME_FEATURES}" | md5sum -b )" ; _identifier="${_identifier%% *}"
		_target="$( exec -- readlink -e -- ./target )/features--${_identifier}"
		if ! VONUVOLI_SCHEME_FEATURES="${VONUVOLI_SCHEME_FEATURES}" CARGO_TARGET_DIR="${_target}" "${@}" ; then
			printf -- '[ee]  failed using features `%s`!\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
			exit -- 1
		fi
		printf -- '[--]\n' >&2
	done
!!

:: compile / lib / debug / features / except-one :: exec -- "${X_RUN[@]}" ':: execute / features / except-one' "${X_RUN[@]}" ':: compile / lib / debug' "${@}"


<< execute / features / combinations
	test "${#}" -ge 1
	readarray -t -- VONUVOLI_SCHEME_FEATURES < <( "${X_RUN[@]}" ':: environment / features / list / combinations' | sort -R )
	for VONUVOLI_SCHEME_FEATURES in "${VONUVOLI_SCHEME_FEATURES[@]}" ; do
		printf -- '[ii]  using features `%s`...\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
		_identifier="$( printf -- '%s' "${VONUVOLI_SCHEME_FEATURES}" | md5sum -b )" ; _identifier="${_identifier%% *}"
		_target="$( exec -- readlink -e -- ./target )/random--${_identifier}"
		if ! VONUVOLI_SCHEME_FEATURES="${VONUVOLI_SCHEME_FEATURES}" CARGO_TARGET_DIR="${_target}" "${@}" ; then
			printf -- '[ee]  failed using features `%s`!\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
			exit -- 1
		fi
		rm -R -f -- "${_target}"
		printf -- '[--]\n' >&2
	done
!!

:: compile / lib / debug / features / combinations :: exec -- "${X_RUN[@]}" ':: execute / features / combinations' "${X_RUN[@]}" ':: compile / lib / debug' "${@}"


<< execute / features / targets
	test "${#}" -ge 1
	readarray -t -- VONUVOLI_SCHEME_FEATURES < <( exec -- "${X_RUN[@]}" ':: environment / features / list / targets' )
	for VONUVOLI_SCHEME_FEATURES in "${VONUVOLI_SCHEME_FEATURES[@]}" ; do
		printf -- '[ii]  using features `%s`...\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
		_identifier="$( printf -- '%s' "${VONUVOLI_SCHEME_FEATURES}" | md5sum -b )" ; _identifier="${_identifier%% *}"
		_target="$( exec -- readlink -e -- ./target )/targets--${_identifier}"
		if ! VONUVOLI_SCHEME_FEATURES="${VONUVOLI_SCHEME_FEATURES}" CARGO_TARGET_DIR="${_target}" "${@}" ; then
			printf -- '[ee]  failed using features `%s`!\n' "${VONUVOLI_SCHEME_FEATURES}" >&2
			exit -- 1
		fi
		printf -- '[--]\n' >&2
	done
!!

:: compile / tree / debug / features / targets :: exec -- "${X_RUN[@]}" ':: execute / features / targets' "${X_RUN[@]}" ':: compile / tree / debug' "${@}"
:: compile / all / debug / features / targets :: exec -- "${X_RUN[@]}" ':: execute / features / targets' "${X_RUN[@]}" ':: compile / all / debug' "${@}"
:: compile / lib / debug / features / targets :: exec -- "${X_RUN[@]}" ':: execute / features / targets' "${X_RUN[@]}" ':: compile / lib / debug' "${@}"
:: compile / test / all / debug / features / targets :: exec -- "${X_RUN[@]}" ':: execute / features / targets' "${X_RUN[@]}" ':: compile / test / all / debug' "${@}"
:: compile / test / scheme / debug / features / targets :: exec -- "${X_RUN[@]}" ':: execute / features / targets' "${X_RUN[@]}" ':: compile / test / scheme / debug' "${@}"




<< compile / lib / dependencies
	# "${X_RUN[@]}" ':: compile / clean / perhaps'
	"${X_RUN[@]}" ':: compile / lib / peg'
	"${X_RUN[@]}" ':: compile / lib / sources-include'
!!


<< compile / lib / peg
	test "${#}" -eq 0
	export -- PATH="${RUST_PATH}"
	if test ! -e ./sources/parser_peg.rs -o ./sources/parser_peg.peg -nt ./sources/parser_peg.rs ; then
		# printf -- '== compile / peg ==\n' >&2
		if test -e ./sources/parser_peg.rs ; then
			rm -- ./sources/parser_peg.rs
		fi
		rust-peg < ./sources/parser_peg.peg >| ./sources/.parser_peg.rs.tmp1
		rustfmt < ./sources/.parser_peg.rs.tmp1 >| ./sources/.parser_peg.rs.tmp2
		mv -T -- ./sources/.parser_peg.rs.tmp2 ./sources/parser_peg.rs
		rm -- ./sources/.parser_peg.rs.tmp1
	fi
!!


<< compile / lib / sources-include
	test "${#}" -eq 0
	export -- PATH="${RUST_PATH}"
	if test -e ./target/lib_sources.in ; then
		_timestamp_previous="$( exec -- date --reference ./target/lib_sources.in -- '+%s' )"
	else
		_timestamp_previous=0
	fi
	_timestamp_current="$( find ./sources/ -xdev -type f -not -name '.*' -not -name 'lib_sources.in' \( -name '*.rs' -o -name '*.in' \) -printf '%T@\n' | LC_ALL=C sort | tail -n 1 )"
	_timestamp_current="${_timestamp_current%%.*}"
	if test "${_timestamp_previous}" -lt "${_timestamp_current}" ; then
		# printf -- '== compile / lib / sources-include ==\n' >&2
		if test -e ./target/lib_sources.in ; then
			rm -- ./target/lib_sources.in
		fi
		if test ! -e ./target/lib_sources.files ; then
			mkdir -- ./target/lib_sources.files
		fi
		(
			printf -- '%s\n' 'static SOURCES : &'\''static [((&'\''static str, usize), &'\''static str)] = &['
			find ./sources/ -xdev -type f -not -name '.*' -not -name 'lib_sources.in' \( -name '*.rs' -o -name '*.in' \) -printf '%f\n' \
			| LC_ALL=C sort \
			| while read _file ; do
				if test ! -e "./target/lib_sources.files/${_file}" -o "./sources/${_file}" -nt "./target/lib_sources.files/${_file}" ; then
					(
						printf -- '\n\n'
						readarray -t _file_lines < <( exec -- jq -R '.' < "./sources/${_file}" )
						_lines_count="${#_file_lines[@]}"
						for (( _line_index = 0 ; _line_index < _lines_count ; _line_index += 1 )) ; do
							printf '(("%s", %d), %s),\n' "${_file}" "$(( _line_index + 1 ))" "${_file_lines[$_line_index]}"
						done
						printf -- '\n\n'
					) > "./target/lib_sources.files/${_file}.tmp"
					mv -T -- "./target/lib_sources.files/${_file}.tmp" "./target/lib_sources.files/${_file}"
				fi
				cat -- "./target/lib_sources.files/${_file}"
			done
			printf -- '];\n'
		) >| ./target/.lib_sources.in.tmp
		touch -d "@${_timestamp_current}" -- ./target/.lib_sources.in.tmp
		mv -T -- ./target/.lib_sources.in.tmp ./target/lib_sources.in
	fi
!!


<< compile / lib / source
	test "${#}" -eq 0
	"${X_RUN[@]}" ':: compile / lib / dependencies'
	export -- PATH="${RUST_PATH}"
	rustc \
			-Z unstable-options \
			--pretty=expanded \
			-- ./sources/lib.rs \
	| "${X_RUN[@]}" ':: execute / rust-fmt'
!!


<< compile / test / scheme / source
	test "${#}" -eq 0
	"${X_RUN[@]}" ':: compile / lib / dependencies'
	export -- PATH="${RUST_PATH}"
	rustc \
			--test \
			--extern vonuvoli_scheme=./target/default/debug/libvonuvoli_scheme.rlib \
			-Z unstable-options \
			--pretty=expanded \
			-- ./tests/scheme.rs \
	| "${X_RUN[@]}" ':: execute / rust-fmt'
!!




<< environment / features / list / targets
	test "${#}" -eq 0
	exec -- sed -r -e 's/^\t+\|\t//' -e '/^\t*$/d' -e '/^\t*#/d' <<<'
	|	vonuvoli_debug_level_0 vonuvoli_transcript vonuvoli_parser vonuvoli_tests
	|	vonuvoli_debug_level_1
	|	vonuvoli_debug_level_2
	|	vonuvoli_debug_level_3
	|	vonuvoli_debug_level_4
	|	vonuvoli_debug_for_tests
	|	vonuvoli_debug_for_binaries
	|	vonuvoli_release
	'
!!

<< environment / features / list / individual
	test "${#}" -eq 0
	exec -- sed -r -e 's/^\t+\|\t//' -e '/^\t*$/d' -e '/^\t*#/d' <<<'
	|	# vonuvoli_abort_on_panic
	|	vonuvoli_backtrace
	|	# vonuvoli_backtrace_sources
	|	vonuvoli_builtins_cache
	|	vonuvoli_builtins_crypto
	|	vonuvoli_builtins_encoding
	|	vonuvoli_builtins_filesystem
	|	vonuvoli_builtins_parameters
	|	vonuvoli_builtins_ports
	|	vonuvoli_builtins_processes
	|	vonuvoli_builtins_promises
	|	vonuvoli_builtins_random
	|	vonuvoli_builtins_records
	|	vonuvoli_builtins_regex
	|	vonuvoli_builtins_serde
	|	vonuvoli_builtins_transcript
	|	# vonuvoli_compiler_trace_error
	|	# vonuvoli_evaluator_trace_error
	|	# vonuvoli_inline
	|	# vonuvoli_new_immutable
	|	# vonuvoli_optimizer_trace_error
	|	vonuvoli_panic_on_failed
	|	vonuvoli_parser
	|	# vonuvoli_port_output_display_flush
	|	# vonuvoli_port_output_newline_flush
	|	# vonuvoli_port_output_write_flush
	|	vonuvoli_terminal
	|	vonuvoli_tests
	|	vonuvoli_transcript
	|	# vonuvoli_transcript_ansi_always
	|	vonuvoli_transcript_ansi_enabled
	|	vonuvoli_transcript_code_hashes
	|	# vonuvoli_transcript_compact
	|	vonuvoli_values_array
	|	vonuvoli_values_bytes
	|	vonuvoli_values_contexts
	|	vonuvoli_values_error
	|	vonuvoli_values_extended
	|	vonuvoli_values_keyword
	|	vonuvoli_values_lambda
	|	vonuvoli_values_mutable
	|	vonuvoli_values_native
	|	vonuvoli_values_opaque
	|	vonuvoli_values_string
	|	vonuvoli_values_unique
	|	vonuvoli_values_values
'
!!

<< environment / features / list / except-one
	test "${#}" -eq 0
	exec -- python2 -- \
		<(
			exec -- sed -r -e 's/^\t+\|\t//' <<<'
			|	import itertools, sys
			|	with open (sys.argv[1]) as _stream :
			|		_options = [_option.strip () for _option in _stream]
			|	_options_count_min = len (_options) - 1
			|	_options_count_max = _options_count_min
			|	for _count in xrange (_options_count_min, _options_count_max + 1) :
			|		for _variants in itertools.combinations (_options, _count) :
			|			print " ".join (_variants)
			' \
		) \
		<( \
			exec -- "${X_RUN[@]}" ':: environment / features / list / individual' \
		)
!!

<< environment / features / list / combinations
	test "${#}" -eq 0
	exec -- python2 -- \
		<(
			exec -- sed -r -e 's/^\t+\|\t//' <<<'
			|	import itertools, sys
			|	with open (sys.argv[1]) as _stream :
			|		_options = [_option.strip () for _option in _stream]
			|	_options_count_min = 1
			|	_options_count_max = 3 # len (_options)
			|	for _count in xrange (_options_count_min, _options_count_max + 1) :
			|		for _variants in itertools.combinations (_options, _count) :
			|			print " ".join (_variants)
			' \
		) \
		<( \
			exec -- "${X_RUN[@]}" ':: environment / features / list / individual' \
		)
!!


<< execute / rust-fmt
	export -- PATH="${RUST_PATH}"
	rustfmt "${@}" \
	| sed -r -n \
			-e ': b' \
			-e '/^$/ d' \
			-e '/^\#\[macro_use\]$/ d' \
			-e '/^\#\[macro_export\]$/ d' \
			-e '/^\#\[allow\(unused_macros\)\]$/ d' \
			-e '/^macro_rules!/ b d' \
			-e 'p' \
			-e 'b' \
			-e ': d' -e 'n' -e '/^ +/! b b' -e 'b d' \
	#
!!




:: execute / bin / interpreter / debug :: "${X_RUN[@]}" ':: compile / bin / interpreter / debug' ; exec -- ./target/default/debug/vonuvoli-scheme-interpreter "${@}"
:: execute / bin / interpreter / release :: "${X_RUN[@]}" ':: compile / bin / interpreter / release' ; exec -- ./target/default/release/vonuvoli-scheme-interpreter "${@}"

:: execute / bin / compiler / debug :: "${X_RUN[@]}" ':: compile / bin / compiler / debug' ; exec -- ./target/default/debug/vonuvoli-scheme-compiler "${@}"
:: execute / bin / compiler / release :: "${X_RUN[@]}" ':: compile / bin / compiler / release' ; exec -- ./target/default/release/vonuvoli-scheme-compiler "${@}"

:: execute / bin / tester / debug :: "${X_RUN[@]}" ':: compile / bin / tester / debug' ; exec -- ./target/default/debug/vonuvoli-scheme-tester "${@}"
:: execute / bin / tester / release :: "${X_RUN[@]}" ':: compile / bin / tester / release' ; exec -- ./target/default/release/vonuvoli-scheme-tester "${@}"

:: execute / bin / bencher / debug :: "${X_RUN[@]}" ':: compile / bin / bencher / debug' ; exec -- ./target/default/debug/vonuvoli-scheme-bencher "${@}"
:: execute / bin / bencher / release :: "${X_RUN[@]}" ':: compile / bin / bencher / release' ; exec -- ./target/default/release/vonuvoli-scheme-bencher "${@}"

:: execute / test / all / debug :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 -- --test-threads 1 --test 'test__' "${@}"
:: execute / test / all / release :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --jobs 1 -- --test-threads 1 --test 'test__' "${@}"

:: execute / test / all / benchmark :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" cargo test --quiet --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --jobs 1 -- --test-threads 1 --bench 'benchmark__' "${@}"
:: execute / test / all / coverage / kcov :: "${X_RUN[@]}" ':: compile / lib / dependencies' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo kcov kcov --no-clean-rebuild --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 --output ./target/kcov -- "${@}"


:: execute / chibi :: exec -- chibi-scheme -m scheme.base -m scheme.case-lambda -m scheme.char -m scheme.complex -m scheme.cxr -m scheme.eval -m scheme.file -m scheme.inexact -m scheme.lazy -m scheme.load -m scheme.process-context -m scheme.r5rs -m scheme.read -m scheme.repl -m scheme.time -m scheme.write "${@}"
:: execute / gauche :: exec -- gosh -b -q -u scheme.base -u scheme.case-lambda -u scheme.char -u scheme.complex -u scheme.cxr -u scheme.eval -u scheme.file -u scheme.inexact -u scheme.lazy -u scheme.load -u scheme.process-context -u scheme.r5rs -u scheme.read -u scheme.repl -u scheme.time -u scheme.write "${@}"
:: execute / python :: exec -- python2 -E -O -O -B -u "${@}"




:: execute / bin / interpreter / debug / time :: "${X_RUN[@]}" ':: compile / bin / interpreter / debug' ; exec --  time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/default/debug/vonuvoli-scheme-interpreter "${@}"
:: execute / bin / interpreter / release / time :: "${X_RUN[@]}" ':: compile / bin / interpreter / release' ; exec --  time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/default/release/vonuvoli-scheme-interpreter "${@}"

:: execute / chibi / time :: exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- chibi-scheme -m scheme.base -m scheme.case-lambda -m scheme.char -m scheme.complex -m scheme.cxr -m scheme.eval -m scheme.file -m scheme.inexact -m scheme.lazy -m scheme.load -m scheme.process-context -m scheme.r5rs -m scheme.read -m scheme.repl -m scheme.time -m scheme.write "${@}"
:: execute / gauche / time :: exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- gosh -b -q -u scheme.base -u scheme.case-lambda -u scheme.char -u scheme.complex -u scheme.cxr -u scheme.eval -u scheme.file -u scheme.inexact -u scheme.lazy -u scheme.load -u scheme.process-context -u scheme.r5rs -u scheme.read -u scheme.repl -u scheme.time -u scheme.write "${@}"
:: execute / python / time :: exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- python2 -E -O -O -B -u "${@}"




:: execute / bin / interpreter / debug / x-selection / clipboard :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / debug' <( exec -- x-selection clipboard output )
:: execute / bin / interpreter / debug / x-selection / primary :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / debug' <( exec -- x-selection primary output )

:: execute / bin / compiler / debug / x-selection / clipboard :: exec -- less-exec "${X_RUN[@]}" ':: execute / bin / compiler / debug' <( exec -- x-selection clipboard output )
:: execute / bin / compiler / debug / x-selection / primary :: exec -- less-exec "${X_RUN[@]}" ':: execute / bin / compiler / debug' <( exec -- x-selection primary output )




:: compile / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / all / debug' "${@}"
:: compile / lib / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / lib / debug' "${@}"
:: compile / bin / interpreter / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / bin / interpreter / debug' "${@}"
:: compile / bin / compiler / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / bin / compiler / debug' "${@}"
:: compile / bin / tester / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / bin / tester / debug' "${@}"
:: compile / bin / bencher / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / bin / bencher / debug' "${@}"
:: compile / test / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / test / all / debug' "${@}"

:: execute / bin / interpreter / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / bin / interpreter / debug' "${@}"
:: execute / bin / compiler / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / bin / compiler / debug' "${@}"
:: execute / bin / tester / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / bin / tester / debug' "${@}"
:: execute / bin / bencher / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / bin / bencher / debug' "${@}"
:: execute / test / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / test / all / debug' "${@}"




<< execute / watch
	test "${#}" -ge 1
	while true ; do
		_timestamp_previous="$( find ./Cargo.toml ./Cargo.lock ./sources/ ./tests/ ./examples/ -xdev -type f -not -path '*/_outputs/*' -printf '%T+\n' | LC_ALL=C sort | tail -n 1 )"
		if ! "${@}" 2>&1 < /dev/null | tee "./target/x-run--watch--${$}.txt" ; then
			x-output osd-notify low "FAILED!  ${*}"
			less -- "./target/x-run--watch--${$}.txt"
		else
			x-output osd-notify low "Succeeded:  ${*}"
			rm -- "./target/x-run--watch--${$}.txt"
		fi
		printf '\n[--]\n' >&2
		while sleep 0.5s ; do
			_timestamp_current="$( find ./Cargo.toml ./Cargo.lock ./sources/ ./tests/ ./examples/ -xdev -type f -not -path '*/_outputs/*' -printf '%T+\n' | LC_ALL=C sort | tail -n 1 )"
			if test "${_timestamp_previous}" != "${_timestamp_current}" ; then
				break
			fi
		done
		printf '\n[--]\n\n' >&2
	done
!!




:: browse / doc :: exec -- x-www open file://"$( readlink -e -- ./target/doc/vonuvoli_scheme/index.html )"
:: browse / coverage / kcov :: exec -- x-www open file://"$( readlink -e -- ./target/kcov/index.html )"
:: browse / r7rs :: exec -- x-www open file://"$( readlink -e -- ./documentation/external/r7rs-small-spec/stripped/r7rs.pdf )"
:: browse / documentation / readme :: exec -- x-www open http://127.0.0.1:53110/




:: files / grep / sources / string :: exec -- git grep --no-index -C10 -F "${@/#/-e}" -- ./sources
:: files / grep / sources / regexp :: exec -- git grep --no-index -C10 -P "${@/#/-e}" -- ./sources

:: files / grep / sources / x-selection / primary :: exec -- git grep --no-index -C10 -F -e "$( exec -- x-selection primary output )" -- ./sources
:: files / grep / sources / x-selection / clipboard :: exec -- git grep --no-index -C10 -F -e "$( exec -- x-selection clipboard output )" -- ./sources

:: files / grep / sources / fixme / show :: exec -- git grep --no-index -C10 -P -e 'FIXME' -- ./sources
:: files / grep / sources / fixme / list :: exec -- git grep --no-index -l -P -e 'FIXME' -- ./sources

:: files / grep / sources / todo / show :: exec -- git grep --no-index -C10 -P -e 'TODO' -- ./sources
:: files / grep / sources / todo / list :: exec -- git grep --no-index -l -P -e 'TODO' -- ./sources

:: files / grep / sources / unimplemented / all / show :: exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK|FIXME:.*)$)' -- ./sources
:: files / grep / sources / unimplemented / all / list :: exec -- git grep --no-index -l -P -e 'unimplemented!(?!.*// (deferred|OK|FIXME:.*)$)' -- ./sources
:: files / grep / sources / unimplemented / primitives / show :: exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK|FIXME:.*)$)' -- './sources/primitives*.rs'
:: files / grep / sources / unimplemented / builtins / show :: exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK|FIXME:.*)$)' -- './sources/builtins*.rs'

:: files / grep / sources / errors / duplicates / list :: grep -o -P -e '(?<=0x)[0-9a-f]{8}(?=[)])|(?<=")[0-9a-f]{8}(?=")' -h -r ./sources -r ./tests --include '*.rs' --include '*.in' | sort | uniq -d
:: files / grep / sources / errors / duplicates / show :: "${X_RUN[@]}" ':: files / grep / sources / errors / duplicates / list' | git grep --no-index -C0 -F -f /dev/stdin -- ./sources ./tests
:: files / grep / sources / errors / improper / list :: grep -o -P -e '(?<=0x)([0-9a-f]{3,7}|[0-9a-f]{9,})(?=[)])|(?<=")([0-9a-f]{3,7}|[0-9a-f]{9,})(?=")' -h -r ./sources -r ./tests --include '*.rs' --include '*.in' | sort -u
:: files / grep / sources / errors / improper / show :: "${X_RUN[@]}" ':: files / grep / sources / errors / improper / list' | git grep --no-index -C2 -F -f /dev/stdin -- ./sources ./tests

:: files / grep / sources / features / list :: grep -o -P -e '(?<=feature = ")[^"]+(?=")' -h -r ./sources -r ./tests --include '*.rs' --include '*.in' | sort -u

:: files / sed / sources / inline-always / disable :: exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(always\) \])$!\1#[ inline (never) ] // __inline_always__!' -i -- {} \;
:: files / sed / sources / inline-always / enable :: exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(never\) \] // __inline_always__)$!\1#[ inline (always) ]!' -i -- {} \;
:: files / sed / sources / inline-always / configurable :: exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(always\) \])$!\1#[ cfg_attr ( feature = "vonuvoli_inline", inline (always) ) ]!' -i -- {} \;
:: files / sed / sources / inline-always / to-plain :: exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(always\) \])$!\1#[ inline ]!' -e 's!^(\s*)(#\[ cfg_attr \( feature = "vonuvoli_inline", inline \(always\) \) \])$!\1#[ cfg_attr ( feature = "vonuvoli_inline", inline ) ]!' -i -- {} \;

:: files / grep / outputs / benchmarks :: git diff --color-words -U0 -- ./tests/_outputs/*--benchmark__* | grep -E -e '^....--' -e 'average' | sed -r -e 's/^(....)--- i\/tests\/_outputs\/[a-z0-9-]+--benchmark__/\1/'




<< workbench / initialize
	test "${#}" -eq 0
	"${X_RUN[@]}" ':: workbench / workspace / initialize'
	"${X_RUN[@]}" ':: workbench / rust-up / initialize'
	"${X_RUN[@]}" ':: workbench / rust-up / install'
	"${X_RUN[@]}" ':: workbench / cargo / install or upgrade'
	"${X_RUN[@]}" ':: workbench / python / initialize'
	"${X_RUN[@]}" ':: workbench / python / install or upgrade'
!!

<< workbench / workspace / initialize
	test "${#}" -eq 0
	if test ! -e ./.cargo ; then
		mkdir -- ./.cargo
	fi
	if test ! -e ./.rust ; then
		mkdir -- ./.rust
	fi
	if test ! -e ./.python ; then
		mkdir -- ./.python
	fi
	if test ! -e ./target ; then
		mkdir -- ./target
	fi
	if test ! -e ./tests/_outputs ; then
		mkdir -- ./tests/_outputs
	fi
	if test ! -e ./examples/_outputs ; then
		mkdir -- ./examples/_outputs
	fi
!!

<< workbench / rust-up / initialize
	test "${#}" -eq 0
	test -e ./.rust
	if test ! -e ./.rust/.initialized ; then
		mkdir -- ./.rust/rustup
		mkdir -- ./.rust/cargo
		curl -s -o ./.rust/rustup-init.tmp -- https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
		chmod +x -- ./.rust/rustup-init.tmp
		mv -n -T -- ./.rust/rustup-init.tmp ./.rust/rustup-init
		export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
		export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
		nice -n 19 -- ./.rust/rustup-init -y --no-modify-path
		touch -- ./.rust/.initialized
	fi
!!

<< workbench / rust-up / install
	test "${#}" -eq 0
	test -e ./.rust/.initialized
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	nice -n 19 -- ./.rust/cargo/bin/rustup install -- stable
	nice -n 19 -- ./.rust/cargo/bin/rustup install -- nightly
	nice -n 19 -- ./.rust/cargo/bin/rustup component add --toolchain stable -- rustfmt-preview
	nice -n 19 -- ./.rust/cargo/bin/rustup component add --toolchain nightly -- rustfmt-preview
!!

<< workbench / rust-up / upgrade
	test "${#}" -eq 0
	test -e ./.rust/.initialized
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	nice -n 19 -- ./.rust/cargo/bin/rustup update
!!

<< workbench / cargo / install or upgrade
	test "${#}" -eq 0
	test -e ./.rust/.initialized
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	export -- PATH="${RUST_PATH:-$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}}"
	nice -n 19 -- cargo install --force peg
	nice -n 19 -- cargo install --force cargo-kcov
	nice -n 19 -- cargo install --force cargo-tree
!!

<< workbench / cargo / update
	test "${#}" -eq 0
	test -e ./.rust/.initialized
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	export -- PATH="${RUST_PATH:-$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}}"
	nice -n 19 -- cargo update
!!

<< workbench / python / initialize
	test "${#}" -eq 0
	if test ! -e ./.python/.initialized ; then
		test -e ./.python
		nice -n 19 -- virtualenv-2.7 --python python2.7 -- ./.python
		touch -- ./.python/.initialized
	fi
!!

<< workbench / python / install or upgrade
	test "${#}" -eq 0
	test -e ./.python/.initialized
	# nice -n 19 -- ./.python/bin/pip install --force docutils
	nice -n 19 -- ./.python/bin/pip install --force restview
!!

:: environment / rust-up / use / stable :: export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}"
:: environment / rust-up / use / nightly :: export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}"

:: environment / rust / stack / 128M :: export -- RUST_MIN_STACK=134217728
:: environment / rust / stack / 1024M :: export -- RUST_MIN_STACK=1073741824
:: environment / rust / backtrace / enable :: export -- RUST_BACKTRACE=1
:: environment / rust / backtrace / disable :: export -- RUST_BACKTRACE=0

:: environment / tests / debug / enable :: export -- VONUVOLI_SCHEME_TESTS_DEBUG=true
:: environment / tests / debug / disable :: export -- VONUVOLI_SCHEME_TESTS_DEBUG=false

:: environment / features / all :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_features_all
:: environment / features / release :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_release
:: environment / features / debug / binaries :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_for_binaries
:: environment / features / debug / tests :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_for_tests
:: environment / features / debug / level-0 :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_level_0
:: environment / features / debug / level-1 :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_level_1
:: environment / features / debug / level-2 :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_level_2
:: environment / features / debug / level-3 :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_level_3
:: environment / features / debug / level-4 :: export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_debug_level_4

:: environment / features / x-selection / primary :: export -- VONUVOLI_SCHEME_FEATURES="$( exec -- x-selection primary output )"
:: environment / features / x-selection / clipboard :: export -- VONUVOLI_SCHEME_FEATURES="$( exec -- x-selection clipboard output )"

:: environment / x-run / trace / enable :: export -- X_RUN_TRACE=true
:: environment / x-run / trace / disable :: export -- X_RUN_TRACE=false

:: environment / taskset / all :: exec -- taskset -a -p -c 0-31 "${$}"
:: environment / taskset / 0,2 :: exec -- taskset -a -p -c 0,2 "${$}"
:: environment / taskset / 3 :: exec -- taskset -a -p -c 3 "${$}"

EOS-31f6e6b1




find ./ -xdev -type f \
		\( -path './sources/*' -o -path './tests/*' -o -path './examples/*' \) \
		\( -name '*.rs' -o -name '*.in' -o -name '*.ss' -o -name '*.sst' \) \
		-printf ':: files / edit / %P :: exec -- sce %p\n' \
		-printf ':: files / view / %P :: exec -- less -- %p\n' \
| sort




for _test in scheme builtins-lists low-level-r7rs low-level-parser low-level-sizes low-level-assertions low-level-rust ; do
test -f "./tests/${_test}.rs"
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' <<'EOS'
:: compile / test / @{TEST} / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: compile / test / @{TEST} / debug' "${@}"
:: compile / test / @{TEST} / debug :: "${X_RUN[@]}" ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --test '@{TEST}' --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}"
:: compile / test / @{TEST} / release :: "${X_RUN[@]}" ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo build --quiet --test '@{TEST}' --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}"
:: execute / test / @{TEST} / tests / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / test / @{TEST} / tests / all / debug' "${@}"
:: execute / test / @{TEST} / tests / all / debug :: "${X_RUN[@]}" ':: compile / test / @{TEST} / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --test '@{TEST}' --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
:: execute / test / @{TEST} / tests / all / release :: "${X_RUN[@]}" ':: compile / test / @{TEST} / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --test '@{TEST}' --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
:: execute / test / @{TEST} / benchmarks / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / test / @{TEST} / benchmarks / all / debug' "${@}"
:: execute / test / @{TEST} / benchmarks / all / debug :: "${X_RUN[@]}" ':: compile / test / @{TEST} / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" cargo test --quiet --test '@{TEST}' --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
:: execute / test / @{TEST} / benchmarks / all / release :: "${X_RUN[@]}" ':: compile / test / @{TEST} / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" VONUVOLI_SCHEME_BENCHMARKS_OUTPUT='./tests/_outputs/@{TEST}--{IDENTIFIER}.out' cargo test --quiet --test '@{TEST}' --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
:: execute / test / @{TEST} / coverage / all / kcov / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / test / @{TEST} / coverage / all / kcov'
:: execute / test / @{TEST} / coverage / all / kcov :: "${X_RUN[@]}" ':: compile / test / @{TEST} / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo kcov kcov --test '@{TEST}' --no-clean-rebuild --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 --output ./target/kcov -- "${@}"
EOS
done


find ./tests/scheme -xdev -type f -name '*.sst' -printf '%f\n' \
| sed -r -e 's/\.sst$//' -e 's/-/_/g' \
| sort -u \
| while read _test ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' <<'EOS'
:: execute / test / scheme / tests / @{TEST} / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / test / scheme / tests / @{TEST} / debug' "${@}"
:: execute / test / scheme / tests / @{TEST} / debug :: "${X_RUN[@]}" ':: compile / test / scheme / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --test scheme --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 -- --nocapture --test-threads 1 --test 'test__@{TEST}' --exact "${@}"
:: execute / test / scheme / tests / @{TEST} / release :: "${X_RUN[@]}" ':: compile / test / scheme / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" cargo test --quiet --test scheme --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --jobs 1 -- --nocapture --test-threads 1 --test 'test__@{TEST}' --exact "${@}"
:: execute / test / scheme / benchmarks / @{TEST} / debug :: "${X_RUN[@]}" ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" cargo test --quiet --test scheme --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_debug_for_tests}" --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__@{TEST}' --exact "${@}"
:: execute / test / scheme / benchmarks / @{TEST} / release :: "${X_RUN[@]}" ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" VONUVOLI_SCHEME_BENCHMARKS_OUTPUT='./tests/_outputs/scheme--{IDENTIFIER}.out' cargo test --quiet --test scheme --release --no-default-features --features "${VONUVOLI_SCHEME_FEATURES:-vonuvoli_release}" --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__@{TEST}' --exact "${@}"
EOS
done


find ./tests/scheme -xdev -type f -name '*.sst' -printf '%f\n' \
| sed -r -e 's/\.sst$//' \
| sort -u \
| while read _test ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' -e 's#\{IDENTIFIER\}'#"${_test//-/_}"'#g' <<'EOS'
:: execute / bin / tester / @{TEST} / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / bin / tester / @{TEST} / debug'
:: execute / bin / tester / @{TEST} / debug :: exec -- nice -n 19 -- "${X_RUN[@]}" ':: execute / bin / tester / debug' './tests/scheme/@{TEST}.sst' "${@}"
:: execute / bin / tester / @{TEST} / release :: exec -- nice -n 19 -- "${X_RUN[@]}" ':: execute / bin / tester / release' './tests/scheme/@{TEST}.sst' "${@}"
:: execute / bin / bencher / @{TEST} / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: execute / bin / bencher / @{TEST} / debug'
:: execute / bin / bencher / @{TEST} / debug :: exec -- taskset -c 2 "${X_RUN[@]}" ':: execute / bin / bencher / debug' './tests/scheme/@{TEST}.sst' "${@}"
:: execute / bin / bencher / @{TEST} / release :: exec -- taskset -c 2 env VONUVOLI_SCHEME_BENCHMARKS_OUTPUT='./tests/_outputs/scheme--benchmark__{IDENTIFIER}.out' "${X_RUN[@]}" ':: execute / bin / bencher / release' './tests/scheme/@{TEST}.sst' "${@}"
EOS
done


printf -- '%s\n' '<< execute / bin / tester / all / debug'
printf -- '%s\n' "\"\${X_RUN[@]}\" ':: compile / bin / tester / debug'"
find ./tests/scheme -xdev -type f -name '*.sst' -printf '%f\n' \
| sed -r -e 's/\.sst$//' \
| sort -u \
| while read _test ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' -e 's#\{IDENTIFIER\}'#"${_test//-/_}"'#g' <<'EOS'
nice -n 19 -- ./target/default/debug/vonuvoli-scheme-tester './tests/scheme/@{TEST}.sst' "${@}"
EOS
done
printf -- '%s\n' '!!'


printf -- '%s\n' '<< execute / bin / bencher / all / release'
printf -- '%s\n' "\"\${X_RUN[@]}\" ':: compile / bin / bencher / release'"
find ./tests/scheme -xdev -type f -name '*.sst' -printf '%f\n' \
| sed -r -e 's/\.sst$//' \
| sort -u \
| while read _test ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' -e 's#\{IDENTIFIER\}'#"${_test//-/_}"'#g' <<'EOS'
if test './tests/scheme/@{TEST}.sst' -nt './tests/_outputs/scheme--benchmark__{IDENTIFIER}.out' ; then taskset -c 2 env VONUVOLI_SCHEME_BENCHMARKS_OUTPUT='./tests/_outputs/scheme--benchmark__{IDENTIFIER}.out' ./target/default/release/vonuvoli-scheme-bencher './tests/scheme/@{TEST}.sst' "${@}" ; fi
EOS
done
printf -- '%s\n' '!!'


find ./examples -xdev -type f -name 'benchmark--*.ss' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / bin / compiler / benchmarks / @{SCRIPT} / debug :: "${X_RUN[@]}" ':: execute / bin / compiler / debug' './examples/benchmark--@{SCRIPT}.ss' "${@}" < /dev/null >| './examples/_outputs/benchmark--@{SCRIPT}--vonuvoli-compile.out' ; exec -- less -- './examples/_outputs/benchmark--@{SCRIPT}--vonuvoli-compile.out'
:: execute / bin / compiler / benchmarks / @{SCRIPT} / release :: "${X_RUN[@]}" ':: execute / bin / compiler / release' ./examples/benchmark--@{SCRIPT}.ss' "${@}" < /dev/null >| './examples/_outputs/benchmark--@{SCRIPT}--vonuvoli-compile.out' ; exec -- less -- './examples/_outputs/benchmark--@{SCRIPT}--vonuvoli-compile.out'
:: execute / benchmark / vonuvoli / benchmarks / @{SCRIPT} / debug :: taskset -c 2 "${X_RUN[@]}" ':: execute / bin / interpreter / debug' './examples/benchmark--@{SCRIPT}.ss' "${@}" < /dev/null | tee -- './examples/_outputs/benchmark--@{SCRIPT}--vonuvoli-debug.out'
:: execute / benchmark / vonuvoli / benchmarks / @{SCRIPT} / release :: taskset -c 2 "${X_RUN[@]}" ':: execute / bin / interpreter / release' './examples/benchmark--@{SCRIPT}.ss' "${@}" < /dev/null | tee -- './examples/_outputs/benchmark--@{SCRIPT}--vonuvoli-release.out'
:: execute / benchmark / chibi / benchmarks / @{SCRIPT} :: taskset -c 2 "${X_RUN[@]}" ':: execute / chibi' -- './examples/benchmark--@{SCRIPT}.ss' "${@}" < /dev/null | tee -- './examples/_outputs/benchmark--@{SCRIPT}--chibi.out'
:: execute / benchmark / gauche / benchmarks / @{SCRIPT} :: taskset -c 2 "${X_RUN[@]}" ':: execute / gauche' -- './examples/benchmark--@{SCRIPT}.ss' "${@}" < /dev/null | tee -- './examples/_outputs/benchmark--@{SCRIPT}--gauche.out'
EOS
done


find ./examples -xdev -type f -name 'benchmark--*.py' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.py$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / benchmark / python / benchmarks / @{SCRIPT} :: taskset -c 2 "${X_RUN[@]}" ':: execute / python' -- './examples/benchmark--@{SCRIPT}.py' "${@}" < /dev/null | tee -- './examples/_outputs/benchmark--@{SCRIPT}--python.out'
EOS
done


find ./examples -xdev -type f \( -name 'benchmark--*.ss' -o -name 'benchmark--*.py' \) -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' -e 's/\.py$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
<< execute / benchmark / compare / benchmarks / @{SCRIPT}
	printf -- '\n--------------------------------------------------------------------------------\n' >&2
	printf -- '\n== %s / vonuvoli / release ==\n' '@{SCRIPT}' >&2
	"${X_RUN[@]}" ':: execute / benchmark / vonuvoli / benchmarks / @{SCRIPT} / release'
	printf -- '\n== %s / chibi ==\n' '@{SCRIPT}' >&2
	"${X_RUN[@]}" ':: execute / benchmark / chibi / benchmarks / @{SCRIPT}'
	printf -- '\n== %s / gauche ==\n' '@{SCRIPT}' >&2
	"${X_RUN[@]}" ':: execute / benchmark / gauche / benchmarks / @{SCRIPT}'
	if test -e './examples/benchmark--@{SCRIPT}.py' ; then
		printf -- '\n== %s / python ==\n' '@{SCRIPT}' >&2
		"${X_RUN[@]}" ':: execute / benchmark / python / benchmarks / @{SCRIPT}'
	fi
	printf -- '\n--------------------------------------------------------------------------------\n' >&2
!!
EOS
done


printf -- '%s\n' '<< execute / benchmark / compare / benchmarks / all'
find ./examples -xdev -type f -name 'benchmark--*.ss' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
printf -- '%s\n' "\"\${X_RUN[@]}\" ':: execute / benchmark / compare / benchmarks / ${_script}'"
done
printf -- '%s\n' '!!'


printf -- '%s\n' '<< execute / benchmark / vonuvoli / all / release'
find ./examples -xdev -type f -name 'benchmark--*.ss' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
printf -- '%s\n' "\"\${X_RUN[@]}\" ':: execute / benchmark / vonuvoli / ${_script} / release'"
done
printf -- '%s\n' '!!'


find ./examples -xdev -type f -name 'optimizer--*.ss' -printf '%f\n' \
| sed -r -e 's/^optimizer--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / bin / compiler / optimizations / @{SCRIPT} / debug :: nice -n 19 -- "${X_RUN[@]}" ':: execute / bin / compiler / debug' './examples/optimizer--@{SCRIPT}.ss' "${@}" >| './examples/_outputs/optimizer--@{SCRIPT}--vonuvoli-compile.out' ; exec -- less -- './examples/_outputs/optimizer--@{SCRIPT}--vonuvoli-compile.out'
:: execute / bin / compiler / optimizations / @{SCRIPT} / release :: nice -n 19 -- "${X_RUN[@]}" ':: execute / bin / compiler / release' './examples/optimizer--@{SCRIPT}.ss' "${@}" >| './examples/_outputs/optimizer--@{SCRIPT}--vonuvoli-compile.out' ; exec -- less -- './examples/_outputs/optimizer--@{SCRIPT}--vonuvoli-compile.out'
EOS
done


printf -- '%s\n' '<< execute / bin / compiler / all / debug'
printf -- '%s\n' "\"\${X_RUN[@]}\" ':: compile / bin / compiler / debug'"
find ./examples -xdev -type f \( -name 'optimizer--*.ss' -o -name 'benchmark--*.ss' -o -name 'examples--*.ss' \) -not \( -name '*--chibi.ss' -o -name '*--gauche.ss' \) -printf '%f\n' \
| sed -r -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
nice -n 19 -- ./target/default/debug/vonuvoli-scheme-compiler './examples/@{SCRIPT}.ss' "${@}" >| './examples/_outputs/@{SCRIPT}--vonuvoli-compile.out'
EOS
done
printf -- '%s\n' '!!'




find ./examples -xdev -type f -name 'examples--*.ss' -not \( -name '*--chibi.ss' -o -name '*--gauche.ss' \) -printf '%f\n' \
| sed -r -e 's/^examples--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / bin / interpreter / examples / @{SCRIPT} / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / debug / watch' './examples/examples--@{SCRIPT}.ss' "${@}"
:: execute / bin / interpreter / examples / @{SCRIPT} / debug :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / debug' './examples/examples--@{SCRIPT}.ss' "${@}"
:: execute / bin / interpreter / examples / @{SCRIPT} / release :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / release' './examples/examples--@{SCRIPT}.ss' "${@}"
:: execute / bin / interpreter / examples / @{SCRIPT} / debug / time :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / debug / time' './examples/examples--@{SCRIPT}.ss' "${@}"
:: execute / bin / interpreter / examples / @{SCRIPT} / release / time :: exec -- "${X_RUN[@]}" ':: execute / bin / interpreter / release / time' './examples/examples--@{SCRIPT}.ss' "${@}"
:: execute / bin / compiler / examples / @{SCRIPT} / debug :: nice -n 19 -- "${X_RUN[@]}" ':: execute / bin / compiler / debug' './examples/examples--@{SCRIPT}.ss' "${@}" >| './examples/_outputs/examples--@{SCRIPT}--vonuvoli-compile.out' ; exec -- less -- './examples/_outputs/examples--@{SCRIPT}--vonuvoli-compile.out'
:: execute / bin / compiler / examples / @{SCRIPT} / release :: nice -n 19 -- "${X_RUN[@]}" ':: execute / bin / compiler / release' './examples/examples--@{SCRIPT}.ss' "${@}" >| './examples/_outputs/examples--@{SCRIPT}--vonuvoli-compile.out' ; exec -- less -- './examples/_outputs/examples--@{SCRIPT}--vonuvoli-compile.out'
EOS
done




find ./examples -xdev -type f -name 'examples--*.ss' -name '*--chibi.ss' -printf '%f\n' \
| sed -r -e 's/^examples--//' -e 's/\.ss$//' -e 's/--chibi$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / chibi / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / chibi' -- './examples/examples--@{SCRIPT}--chibi.ss' "${@}"
:: execute / chibi / time / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / chibi / time' -- './examples/examples--@{SCRIPT}--chibi.ss' "${@}"
EOS
done

find ./examples -xdev -type f -name 'examples--*.ss' -name '*--r7rs.ss' -printf '%f\n' \
| sed -r -e 's/^examples--//' -e 's/\.ss$//' -e 's/--r7rs$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / chibi / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / chibi' -- './examples/examples--@{SCRIPT}--r7rs.ss' "${@}"
:: execute / chibi / time / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / chibi / time' -- './examples/examples--@{SCRIPT}--r7rs.ss' "${@}"
EOS
done


find ./examples -xdev -type f -name 'examples--*.ss' -name '*--gauche.ss' -printf '%f\n' \
| sed -r -e 's/^examples--//' -e 's/\.ss$//' -e 's/--gauche$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / gauche / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / gauche' -- './examples/examples--@{SCRIPT}--gauche.ss' "${@}"
:: execute / gauche / time / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / gauche / time' -- './examples/examples--@{SCRIPT}--gauche.ss' "${@}"
EOS
done

find ./examples -xdev -type f -name 'examples--*.ss' -name '*--r7rs.ss' -printf '%f\n' \
| sed -r -e 's/^examples--//' -e 's/\.ss$//' -e 's/--r7rs$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / gauche / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / gauche' -- './examples/examples--@{SCRIPT}--r7rs.ss' "${@}"
:: execute / gauche / time / examples / @{SCRIPT} :: exec -- "${X_RUN[@]}" ':: execute / gauche / time' -- './examples/examples--@{SCRIPT}--r7rs.ss' "${@}"
EOS
done




if true ; then
	exec 1>&"${_stdout_fd}"-
	X_RUN_ACTION=parse x-run < ./.x-run.options.tmp1 >| ./.x-run.options.tmp2
	X_RUN_ACTION=scriptlets x-run < ./.x-run.options.tmp1 >| ./.x-run.execute.tmp2
	mv -T -- ./.x-run.options.tmp2 ./.x-run.options
	mv -T -- ./.x-run.execute.tmp2 ./.x-run.execute
	chmod +x -- ./.x-run.execute
	rm -- ./.x-run.options.tmp1
fi




if true ; then
	
	exec {_stdout_fd}<&1
	exec >| ./.x-run.builder.tmp1
	
	
	cat <<'EOS-31f6e6b1'


<< builder / synchronize / sources / push
	test "${#}" -eq 0
	exec -- rsync \
			--archive \
			--delete-after --delete-excluded \
			--no-specials --prune-empty-dirs --links \
			--times --omit-dir-times --omit-link-times \
			--compress-level 0 \
			--info=backup,copy,del,misc,mount,name,remove,skip,symsafe --itemize-changes \
			--filter 'H /.git' \
			--filter 'P /.git' \
			--filter 'H /.rust' \
			--filter 'P /.rust' \
			--filter 'H /.python' \
			--filter 'P /.python' \
			--filter 'H /target' \
			--filter 'P /target' \
			--filter 'H /examples/_outputs' \
			--filter 'P /examples/_outputs' \
			--filter 'H /tests/_outputs' \
			--filter 'P /tests/_outputs' \
			--filter '+ /.cargo/' \
			--filter '+ /.x-run.execute' \
			--filter '- .*' \
			-- \
		./ \
		vonuvoli-scheme-builder:./vonuvoli-scheme-builder/ \
	#
!!


<< builder / synchronize / sources / push / clear
	test "${#}" -eq 0
	exec -- rsync \
			--archive \
			--delete-after --delete-excluded \
			--no-specials --prune-empty-dirs --links \
			--times --omit-dir-times --omit-link-times \
			--compress-level 0 \
			--info=backup,copy,del,misc,mount,name,remove,skip,symsafe --itemize-changes \
			--filter 'H /.git' \
			--filter 'H /.rust' \
			--filter 'H /.python' \
			--filter 'H /target' \
			--filter 'H /examples/_outputs' \
			--filter 'H /tests/_outputs' \
			--filter '+ /.cargo/' \
			--filter '+ /.x-run.execute' \
			--filter '- .*' \
			-- \
		./ \
		vonuvoli-scheme-builder:./vonuvoli-scheme-builder/ \
	#
!!


<< builder / synchronize / outputs / push
	test "${#}" -eq 0
	exec -- rsync \
			--archive \
			--delete-after --delete-excluded \
			--no-specials --prune-empty-dirs --links \
			--times --omit-dir-times --omit-link-times \
			--compress-level 0 \
			--info=backup,copy,del,misc,mount,name,remove,skip,symsafe --itemize-changes \
			--filter '+ /examples/' \
			--filter '+ /examples/_outputs/***' \
			--filter '+ /tests/' \
			--filter '+ /tests/_outputs/***' \
			--filter 'P /***' \
			--filter 'H /***' \
			-- \
		./ \
		vonuvoli-scheme-builder:./vonuvoli-scheme-builder/ \
	#
!!

<< builder / synchronize / outputs / pull
	test "${#}" -eq 0
	exec -- rsync \
			--archive \
			--delete-after --delete-excluded \
			--no-specials --prune-empty-dirs --links \
			--times --omit-dir-times --omit-link-times \
			--compress-level 0 \
			--info=backup,copy,del,misc,mount,name,remove,skip,symsafe --itemize-changes \
			--filter '+ /examples/' \
			--filter '+ /examples/_outputs/***' \
			--filter '+ /tests/' \
			--filter '+ /tests/_outputs/***' \
			--filter 'P /***' \
			--filter 'H /***' \
			-- \
		vonuvoli-scheme-builder:./vonuvoli-scheme-builder/ \
		./ \
	#
!!


<< builder / synchronize / binaries / pull
	test "${#}" -eq 0
	exec -- rsync \
			--archive \
			--delete-after --delete-excluded \
			--no-specials --prune-empty-dirs --links \
			--times --omit-dir-times --omit-link-times \
			--compress-level 0 \
			--info=backup,copy,del,misc,mount,name,remove,skip,symsafe --itemize-changes \
			--filter '+ /debug/' \
			--filter '+ /debug/vonuvoli-scheme-interpreter' \
			--filter '+ /debug/vonuvoli-scheme-compiler' \
			--filter '+ /debug/vonuvoli-scheme-tester' \
			--filter '+ /debug/vonuvoli-scheme-bencher' \
			--filter '+ /release/' \
			--filter '+ /release/vonuvoli-scheme-interpreter' \
			--filter '+ /release/vonuvoli-scheme-compiler' \
			--filter '+ /release/vonuvoli-scheme-tester' \
			--filter '+ /release/vonuvoli-scheme-bencher' \
			--filter 'P /***' \
			--filter 'H /***' \
			-- \
		vonuvoli-scheme-builder:./vonuvoli-scheme-builder/target/build/ \
		./target/binaries/ \
	#
!!


:: builder / build / all / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: builder / build / all / debug'
<< builder / build / all / debug
	test "${#}" -eq 0
	export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_release CARGO_TARGET_DIR=./target/build
	"${X_RUN[@]}" ':: builder / synchronize / sources / push'
	"${X_RUN[@]}" ':: builder / compile / bin / all / debug'
	"${X_RUN[@]}" ':: builder / synchronize / binaries / pull'
!!

:: builder / build / all / release / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: builder / build / all / release'
<< builder / build / all / release
	test "${#}" -eq 0
	export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_release CARGO_TARGET_DIR=./target/build
	"${X_RUN[@]}" ':: builder / synchronize / sources / push'
	"${X_RUN[@]}" ':: builder / compile / bin / all / release'
	"${X_RUN[@]}" ':: builder / synchronize / binaries / pull'
!!


:: builder / build / interpreter / debug / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: builder / build / interpreter / debug'
<< builder / build / interpreter / debug
	test "${#}" -eq 0
	export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_release CARGO_TARGET_DIR=./target/build
	"${X_RUN[@]}" ':: builder / synchronize / sources / push'
	"${X_RUN[@]}" ':: builder / compile / bin / interpreter / debug'
	"${X_RUN[@]}" ':: builder / synchronize / binaries / pull'
!!

:: builder / build / interpreter / release / watch :: exec -- "${X_RUN[@]}" ':: execute / watch' "${X_RUN[@]}" ':: builder / build / interpreter / release'
<< builder / build / interpreter / release
	test "${#}" -eq 0
	export -- VONUVOLI_SCHEME_FEATURES=vonuvoli_release CARGO_TARGET_DIR=./target/build
	"${X_RUN[@]}" ':: builder / synchronize / sources / push'
	"${X_RUN[@]}" ':: builder / compile / bin / interpreter / release'
	"${X_RUN[@]}" ':: builder / synchronize / binaries / pull'
!!


EOS-31f6e6b1
	
	
	while read -r -- _option ; do
		case "${_option}" in
			( ':: compile / '* | ':: execute / '* | ':: workbench / '* )
				_option="${_option#:: }"
				
				case "${_option}" in
					( *' / watch' )
						_option="${_option% / watch}"
						printf -- '\n<< builder / %s / watch\n' "${_option}"
						printf -- 'exec -- "${X_RUN[@]}" '\'':: execute / watch'\'' "${X_RUN[@]}" %q\n' ":: builder / ${_option}"
						printf -- '!!\n\n'
						continue
					;;
				esac
				
				printf -- '\n<< builder / %s\n' "${_option}"
				printf -- '"${X_RUN[@]}" %q\n' ":: builder / synchronize / sources / push"
				_scriptlet="$( printf -- 'cd -- ./vonuvoli-scheme-builder/ && if test -e ./.rust/rustup/toolchains -a -e ./.rust/cargo/bin ; then export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}" ; fi && export -- VONUVOLI_SCHEME_FEATURES=%%q && if test -z "${VONUVOLI_SCHEME_FEATURES}" ; then unset -- VONUVOLI_SCHEME_FEATURES ; fi && export -- CARGO_TARGET_DIR=%%q && if test -z "${CARGO_TARGET_DIR}" ; then unset -- CARGO_TARGET_DIR ; fi && ./.x-run.execute %q' ":: ${_option}" )"
				printf -- 'exec -- ssh -- vonuvoli-scheme-builder "$( printf -- %q "${VONUVOLI_SCHEME_FEATURES:-}" "${CARGO_TARGET_DIR:-}" )"\n' "${_scriptlet}"
				printf -- '!!\n\n'
				
			;;
		esac
	done \
		< <( X_RUN_ACTION=parse-options x-run < ./.x-run.options ) \
	
	
	exec 1>&"${_stdout_fd}"-
	X_RUN_ACTION=parse x-run < ./.x-run.builder.tmp1 >| ./.x-run.builder.tmp2
	mv -T -- ./.x-run.builder.tmp2 ./.x-run.builder
	rm -- ./.x-run.builder.tmp1
	
fi




if true ; then
	X_RUN_ACTION=scriptlets x-run < <( exec -- cat -- ./.x-run.options ./.x-run.builder ) >| ./.x-run.execute-local.tmp1
	mv -T -- ./.x-run.execute-local.tmp1 ./.x-run.execute-local
	chmod +x -- ./.x-run.execute-local
fi




exec -- cat -- ./.x-run.options ./.x-run.builder
exit -- 1

