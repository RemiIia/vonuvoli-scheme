

(~pair-immutable? (~list->mutable '(1 2 3))) => #f
(~pair-mutable? (~list->mutable '(1 2 3))) => #t

(~pair-immutable? (~list->immutable '(1 2 3))) => #t
(~pair-mutable? (~list->immutable '(1 2 3))) => #f




(define (mutate mutator list . rest)
	(define mutable-list (~list->mutable list))
	(define output (apply mutator mutable-list rest))
	(values mutable-list output))
=> !ignore




(mutate set-car! '(1 2) 9) => #values((9 2) 1)
(mutate set-cdr! '(1 2) '(9)) => #values((1 9) (2))


(mutate ~list-set-car! '(1 2 3 4) 0 9) => #values((9 2 3 4) 1)
(mutate ~list-set-car! '(1 2 3 4) 1 9) => #values((1 9 3 4) 2)
(mutate ~list-set-car! '(1 2 3 4) 2 9) => #values((1 2 9 4) 3)
(mutate ~list-set-car! '(1 2 3 4) 3 9) => #values((1 2 3 9) 4)

(mutate ~list-set-cdr! '(1 2 3 4) 0 '(9)) => #values((1 9) (2 3 4))
(mutate ~list-set-cdr! '(1 2 3 4) 1 '(9)) => #values((1 2 9) (3 4))
(mutate ~list-set-cdr! '(1 2 3 4) 2 '(9)) => #values((1 2 3 9) (4))
(mutate ~list-set-cdr! '(1 2 3 4) 3 '(9)) => #values((1 2 3 4 9) ())


(mutate ~list-fill! '() 9) => #values(() #void)
(mutate ~list-fill! '() 9 0) => #values(() #void)
(mutate ~list-fill! '() 9 0 0) => #values(() #void)

(mutate ~list-fill! '(1 2 3 4) 9) => #values((9 9 9 9) #void)
(mutate ~list-fill! '(1 2 3 4) 9 0) => #values((9 9 9 9) #void)
(mutate ~list-fill! '(1 2 3 4) 9 0 0) => #values((1 2 3 4) #void)
(mutate ~list-fill! '(1 2 3 4) 9 0 1) => #values((9 2 3 4) #void)
(mutate ~list-fill! '(1 2 3 4) 9 1) => #values((1 9 9 9) #void)
(mutate ~list-fill! '(1 2 3 4) 9 1 1) => #values((1 2 3 4) #void)
(mutate ~list-fill! '(1 2 3 4) 9 1 2) => #values((1 9 3 4) #void)
(mutate ~list-fill! '(1 2 3 4) 9 1 3) => #values((1 9 9 4) #void)
(mutate ~list-fill! '(1 2 3 4) 9 3) => #values((1 2 3 9) #void)
(mutate ~list-fill! '(1 2 3 4) 9 4) => #values((1 2 3 4) #void)
(mutate ~list-fill! '(1 2 3 4) 9 4 4) => #values((1 2 3 4) #void)

