
(cons 0 1) => '(0 . 1)
(cons '(0) 1) => '((0) . 1)
(cons '(0) '(1)) => '((0) . (1))
(cons '(0) '(1)) => '((0) 1)




(car '(0 . 1)) => 0
(cdr '(0 . 1)) => 1

(car '(0 1 2)) => 0
(cdr '(0 1 2)) => '(1 2)




(~make-pair 0 1) => '(0 . 1)

(~make-pair 0 1 #t) => '(0 . 1)
(~pair-immutable? (~make-pair 0 1 #t)) => #t
(~pair-immutable? (~make-pair 0 1 #f)) => #f

(~make-pair 0 1 #f) => '(0 . 1)
(~pair-mutable? (~make-pair 0 1 #t)) => #f
(~pair-mutable? (~make-pair 0 1 #f)) => #t




(~pair->immutable (cons 0 1)) => '(0 . 1)
(~pair->mutable (cons 0 1)) => '(0 . 1)

(~pair->immutable (~pair->mutable (cons 0 1))) => '(0 . 1)
(~pair->mutable (~pair->immutable (cons 0 1))) => '(0 . 1)

(~pair->immutable (~pair->immutable (cons 0 1))) => '(0 . 1)
(~pair->mutable (~pair->mutable (cons 0 1))) => '(0 . 1)

(~pair->immutable (cons 0 1)) => (~pair->mutable (cons 0 1))
(~pair->mutable (cons 0 1)) => (~pair->immutable (cons 0 1))




(pair? (~pair->immutable (cons 0 1))) => #t
(~pair-immutable? (~pair->immutable (cons 0 1))) => #t
(~pair-mutable? (~pair->immutable (cons 0 1))) => #f

(pair? (~pair->mutable (cons 0 1))) => #t
(~pair-immutable? (~pair->mutable (cons 0 1))) => #f
(~pair-mutable? (~pair->mutable (cons 0 1))) => #t


(pair? (~pair->immutable (~pair->mutable (cons 0 1)))) => #t
(~pair-immutable? (~pair->immutable (~pair->mutable (cons 0 1)))) => #t
(~pair-mutable? (~pair->immutable (~pair->mutable (cons 0 1)))) => #f

(pair? (~pair->mutable (~pair->immutable (cons 0 1)))) => #t
(~pair-immutable? (~pair->mutable (~pair->immutable (cons 0 1)))) => #f
(~pair-mutable? (~pair->mutable (~pair->immutable (cons 0 1)))) => #t


(pair? (~pair->immutable (~pair->immutable (cons 0 1)))) => #t
(~pair-immutable? (~pair->immutable (~pair->immutable (cons 0 1)))) => #t
(~pair-mutable? (~pair->immutable (~pair->immutable (cons 0 1)))) => #f

(pair? (~pair->mutable (~pair->mutable (cons 0 1)))) => #t
(~pair-immutable? (~pair->mutable (~pair->mutable (cons 0 1)))) => #f
(~pair-mutable? (~pair->mutable (~pair->mutable (cons 0 1)))) => #t




(define a (~pair->mutable (cons 0 1))) => '(0 . 1)

(car a) => 0
(cdr a) => 1

(set-car! a 2) => 0
(set-cdr! a 3) => 1

(car a) => 2
(cdr a) => 3




(caar '((0 . a) (1 . b) (2 . c))) => 0
(cdar '((0 . a) (1 . b) (2 . c))) => 'a
(cadr '((0 . a) (1 . b) (2 . c))) => '(1 . b)
(cddr '((0 . a) (1 . b) (2 . c))) => '((2 . c))




(caaar '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => 0
(caadr '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '(3 d)

(cadar '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '(1 b)
(caddr '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '((6 g) (7 h) (8 i))

(cdaar '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '(a)
(cdadr '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '((4 e) (5 f))

(cddar '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '((2 c))
(cdddr '(   ((0 a) (1 b) (2 c))    ((3 d) (4 e) (5 f))    ((6 g) (7 h) (8 i))   )) => '()

